name: Terraform Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno a desplegar'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]
      auto_approve:
        description: 'Aprobar automáticamente?'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: us-west-1

jobs:
  validate-and-plan:
    name: Validate, Lint & Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./environments/${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Environment Directory
        run: |
          if [ ! -d "environments/${{ github.event.inputs.environment }}" ]; then
            echo "Directorio no encontrado: environments/${{ github.event.inputs.environment }}"; exit 1
          fi
        # Es importante verificar que el directorio de trabajo exista antes de continuar.

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt & validate
        run: |
          terraform fmt -recursive
          terraform validate
        # Estos comandos formatean y validan la configuración de Terraform.

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4 # Usando la acción setup-tflint
        with:
          tflint_version: latest # Puedes fijar una versión específica si lo prefieres, ej: v0.50.3

      - name: Run TFLint
        run: tflint --config=.tflint.hcl --recursive
        # Este comando se ejecuta en el working-directory definido en defaults.run
        # Asegúrate que .tflint.hcl esté en ./environments/${{ github.event.inputs.environment }}/.tflint.hcl
        # o ajusta la ruta --config=../../.tflint.hcl si está en la raíz del repo.

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # AWS_REGION ya está definido a nivel de 'env' del workflow.

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: ./environments/${{ github.event.inputs.environment }}/tfplan # Se especifica la ruta completa al plan.

  security-scans:
    name: Security Scanning
    needs: validate-and-plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code # Necesario para algunas herramientas o si se escanean archivos .tf
        uses: actions/checkout@v4

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: . # Descarga el plan al directorio raíz del runner.

      - name: Run tfsec on Plan (tabla)
        uses: aquasecurity/tfsec-action@v1.1.0 # Puedes verificar si hay una versión más nueva
        with:
          plan_file: tfplan
          format: table
          output: tfsec-results.txt
          # exit-code: '1' # Descomenta si quieres que el pipeline falle si tfsec encuentra problemas.

      - name: Upload tfsec Report
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-report-${{ github.event.inputs.environment }}
          path: tfsec-results.txt

      - name: Run Checkov on Plan (SARIF)
        uses: bridgecrewio/checkov-action@v12 # Puedes verificar si hay una versión más nueva
        with:
          file: tfplan
          framework: terraform_plan
          output_format: sarif
          output_file_path: checkov.sarif
          # soft_fail: true # Descomenta si prefieres que el job no falle por issues de checkov.

      - name: Upload Checkov Report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report-${{ github.event.inputs.environment }}
          path: checkov.sarif

  terraform-apply:
    name: Terraform Apply
    if: ${{ github.event.inputs.auto_approve == 'true' && (github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'dev') }}
    needs: security-scans
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: ./environments/${{ github.event.inputs.environment }}
    permissions:
      contents: read
      id-token: write # Necesario para OIDC
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: ./environments/${{ github.event.inputs.environment }} # Descarga el plan al directorio de trabajo correcto.

      - name: AWS Login (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
        # El archivo tfplan se espera en el working-directory.
