name: Terraform Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno a desplegar'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      auto_approve:
        description: 'Aprobar automáticamente?'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: us-west-1

jobs:
  validate-environment:
    name: Validate Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Environment Directory
        run: |
          if [ ! -d "environments/${{ github.event.inputs.environment }}" ]; then
            echo "Error: Directorio del entorno no encontrado: environments/${{ github.event.inputs.environment }}"
            exit 1
          fi
          echo "Entorno válido: ${{ github.event.inputs.environment }}"

  terraform-setup:
    name: Setup and Validate
    needs: validate-environment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./environments/${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: {}

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -input=false
        env:
          TF_CLI_ARGS: -no-color

      - name: Terraform Validate
        run: terraform validate

  security-checks:
    name: Security Scanning
    needs: terraform-setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./environments/${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run TFSec
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'

      - name: Upload TFSec Report
        uses: actions/upload-artifact@v3
        with:
          name: tfsect-report-${{ github.event.inputs.environment }}
          path: trivy-results.sarif

      - name: Checkov Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file: checkov.sarif

      - name: Upload Checkov Report
        uses: actions/upload-artifact@v3
        with:
          name: checkov-report-${{ github.event.inputs.environment }}
          path: checkov.sarif

  terraform-plan:
    name: Terraform Plan
    needs: [terraform-setup, security-checks]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./environments/${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: {}

      - name: Terraform Init
        run: terraform init -input=false

      - name: Generate Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: tfplan

      - name: Cost Estimation
        uses: infracost/infracost-action@v2
        with:
          path: .
          terraform_plan_flags: -out=tfplan
          sync_usage_file: true
          show_skipped: false
          format: table
          output: infracost-report.md

      - name: Upload Cost Report
        uses: actions/upload-artifact@v3
        with:
          name: cost-report-${{ github.event.inputs.environment }}
          path: infracost-report.md

  terraform-apply:
    name: Terraform Apply
    if: ${{ github.event.inputs.environment == 'prod' && github.event.inputs.auto_approve == 'true' }}
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./environments/${{ github.event.inputs.environment }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: {}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan-${{ github.event.inputs.environment }}

      - name: AWS Login (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
